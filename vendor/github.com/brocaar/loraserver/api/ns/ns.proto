syntax = "proto3";

package ns;

import "profiles.proto";

// NetworkServer is the network-server service.
service NetworkServer {
    // CreateServiceProfile creates the given service-profile.
    rpc CreateServiceProfile(CreateServiceProfileRequest) returns (CreateServiceProfileResponse) {}

    // GetServiceProfile returns the service-profile matching the given id.
    rpc GetServiceProfile(GetServiceProfileRequest) returns (GetServiceProfileResponse) {}

    // UpdateServiceProfile updates the given service-profile.
    rpc UpdateServiceProfile(UpdateServiceProfileRequest) returns (UpdateServiceProfileResponse) {}

    // DeleteServiceProfile deletes the service-profile matching the given id.
    rpc DeleteServiceProfile(DeleteServiceProfileRequest) returns (DeleteServiceProfileResponse) {}

    // CreateRoutingProfile creates the given routing-profile.
    rpc CreateRoutingProfile(CreateRoutingProfileRequest) returns (CreateRoutingProfileResponse) {}

    // GetRoutingProfile returns the routing-profile matching the given id.
    rpc GetRoutingProfile(GetRoutingProfileRequest) returns (GetRoutingProfileResponse) {}

    // UpdateRoutingProfile updates the given routing-profile.
    rpc UpdateRoutingProfile(UpdateRoutingProfileRequest) returns (UpdateRoutingProfileResponse) {}

    // DeleteRoutingProfile deletes the routing-profile matching the given id.
    rpc DeleteRoutingProfile(DeleteRoutingProfileRequest) returns (DeleteRoutingProfileResponse) {}

    // CreateDeviceProfile creates the given device-profile.
    rpc CreateDeviceProfile(CreateDeviceProfileRequest) returns (CreateDeviceProfileResponse) {}

    // GetDeviceProfile returns the device-profile matching the given id.
    rpc GetDeviceProfile(GetDeviceProfileRequest) returns (GetDeviceProfileResponse) {}

    // UpdateDeviceProfile updates the given device-profile.
    rpc UpdateDeviceProfile(UpdateDeviceProfileRequest) returns (UpdateDeviceProfileResponse) {}

    // DeleteDeviceProfile deletes the device-profile matching the given id.
    rpc DeleteDeviceProfile(DeleteDeviceProfileRequest) returns (DeleteDeviceProfileResponse) {}

    // CreateDevice creates the given device.
    rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceResponse) {}

    // GetDevice returns the device matching the given DevEUI.
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse) {}

    // UpdateDevice updates the given device.
    rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse) {}

    // DeleteDevice deletes the device matching the given DevEUI.
    rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse) {}

    // ActivateDevice activates a device (ABP).
    rpc ActivateDevice(ActivateDeviceRequest) returns (ActivateDeviceResponse) {}

    // DeactivateDevice de-activates a device.
    rpc DeactivateDevice(DeactivateDeviceRequest) returns (DeactivateDeviceResponse) {}

    // GetDeviceActivation returns the device activation details.
    rpc GetDeviceActivation(GetDeviceActivationRequest) returns (GetDeviceActivationResponse) {}

    // GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
    rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {}

    // EnqueueDownlinkMACCommand adds the downlink mac-command to the queue.
    rpc EnqueueDownlinkMACCommand(EnqueueDownlinkMACCommandRequest) returns (EnqueueDownlinkMACCommandResponse) {}

    // SendDownlinkData pushes the given downlink payload to the node (only works for Class-C nodes).
    rpc SendDownlinkData(SendDownlinkDataRequest) returns (SendDownlinkDataResponse) {}

	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	rpc SendProprietaryPayload(SendProprietaryPayloadRequest) returns (SendProprietaryPayloadResponse) {}

    // CreateGateway creates the given gateway.
    rpc CreateGateway(CreateGatewayRequest) returns (CreateGatewayResponse) {}

    // GetGateway returns data for a particular gateway.
    rpc GetGateway(GetGatewayRequest) returns (GetGatewayResponse) {}

    // UpdateGateway updates an existing gateway.
    rpc UpdateGateway(UpdateGatewayRequest) returns (UpdateGatewayResponse) {}

    // ListGateways returns the existing gateways.
    rpc ListGateways(ListGatewayRequest) returns (ListGatewayResponse) {}

    // DeleteGateway deletes a gateway.
    rpc DeleteGateway(DeleteGatewayRequest) returns (DeleteGatewayResponse) {}

    // GenerateGatewayToken issues a JWT token which can be used by the gateway
    // for authentication.
    rpc GenerateGatewayToken(GenerateGatewayTokenRequest) returns (GenerateGatewayTokenResponse) {}

    // GetGatewayStats returns stats of an existing gateway.
    rpc GetGatewayStats(GetGatewayStatsRequest) returns (GetGatewayStatsResponse) {}

    // GetFrameLogsForDevEUI returns the uplink / downlink frame logs for the given DevEUI.
    rpc GetFrameLogsForDevEUI(GetFrameLogsForDevEUIRequest) returns (GetFrameLogsResponse) {}

    // CreateChannelConfiguration creates the given channel-configuration.
    rpc CreateChannelConfiguration(CreateChannelConfigurationRequest) returns (CreateChannelConfigurationResponse) {}

    // GetChannelConfiguration returns the channel-configuration for the given ID.
    rpc GetChannelConfiguration(GetChannelConfigurationRequest) returns (GetChannelConfigurationResponse) {}

    // UpdateChannelConfiguration updates the given channel-configuration.
    rpc UpdateChannelConfiguration(UpdateChannelConfigurationRequest) returns (UpdateChannelConfigurationResponse) {}

    // DeleteChannelConfiguration deletes the channel-configuration matching the
    // given ID.
    rpc DeleteChannelConfiguration(DeleteChannelConfigurationRequest) returns (DeleteChannelConfigurationResponse) {}

    // ListChannelConfigurations returns all channel-configurations.
    rpc ListChannelConfigurations(ListChannelConfigurationsRequest) returns (ListChannelConfigurationsResponse) {}

    // CreateExtraChannel creates the given extra channel.
    rpc CreateExtraChannel(CreateExtraChannelRequest) returns (CreateExtraChannelResponse) {}

    // UpdateExtraChannel updates the given extra channel.
    rpc UpdateExtraChannel(UpdateExtraChannelRequest) returns (UpdateExtraChannelResponse) {}

    // DeleteExtraChannel deletes the extra channel matching the given id.
    rpc DeleteExtraChannel(DeleteExtraChannelRequest) returns (DeleteExtraChannelResponse) {}

    // GetExtraChannelsForChannelConfigurationID returns the extra channels for
    // the given channel-configuration id.
    rpc GetExtraChannelsForChannelConfigurationID(GetExtraChannelsForChannelConfigurationIDRequest) returns (GetExtraChannelsForChannelConfigurationIDResponse) {}
}

enum RXWindow {
    // Receive window 1
    RX1 = 0;

    // Receive window 2
    RX2 = 1;
}

enum Modulation {
    // LoRa
    LORA = 0;

    // FSK
    FSK = 1;
}


message CreateServiceProfileRequest {
    ServiceProfile serviceProfile = 1;
}

message CreateServiceProfileResponse {
    string serviceProfileID = 1;
}

message GetServiceProfileRequest {
    string serviceProfileID = 1;
}

message GetServiceProfileResponse {
    ServiceProfile serviceProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateServiceProfileRequest {
    ServiceProfile serviceProfile = 1;
}

message UpdateServiceProfileResponse {}

message DeleteServiceProfileRequest {
    string serviceProfileID = 1;
}

message DeleteServiceProfileResponse {}

message RoutingProfile {
	string routingProfileID = 1;
    string asID = 2;
}

message CreateRoutingProfileRequest {
    RoutingProfile routingProfile = 1;
}

message CreateRoutingProfileResponse {
    string routingProfileID = 1;
}

message GetRoutingProfileRequest {
    string routingProfileID = 1;
}

message GetRoutingProfileResponse {
    RoutingProfile routingProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateRoutingProfileRequest {
    RoutingProfile routingProfile = 1;
}

message UpdateRoutingProfileResponse {}

message DeleteRoutingProfileRequest {
    string routingProfileID = 1;
}

message DeleteRoutingProfileResponse {}

message CreateDeviceProfileRequest {
    DeviceProfile deviceProfile = 1;
}

message CreateDeviceProfileResponse {
    string deviceProfileID = 1;
}

message GetDeviceProfileRequest {
    string deviceProfileID = 1;
}

message GetDeviceProfileResponse {
    DeviceProfile deviceProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateDeviceProfileRequest {
    DeviceProfile deviceProfile = 1;
}

message UpdateDeviceProfileResponse {}

message DeleteDeviceProfileRequest {
    string deviceProfileID = 1;
}

message DeleteDeviceProfileResponse {}

message Device {
    bytes devEUI = 1;
    string deviceProfileID = 2;
    string serviceProfileID = 3;
    string routingProfileID = 4;
}

message CreateDeviceRequest {
    Device device = 1;
}

message CreateDeviceResponse {}

message GetDeviceRequest {
    bytes devEUI = 1;
}

message GetDeviceResponse {
    Device device = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateDeviceRequest {
    Device device = 1;
}

message UpdateDeviceResponse {}

message DeleteDeviceRequest {
    bytes devEUI = 1;
}

message DeleteDeviceResponse {}

message ActivateDeviceRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;

    // The address of the device (4 bytes).
    bytes devAddr = 2;

    // The network-session key (16 bytes).
    bytes nwkSKey = 3;

    // The next expected uplink frame-counter.
    uint32 fCntUp = 4;

    // The frame-counter used for the next downlink frame.
    uint32 fCntDown = 5;

    // Skip frame-counter checks (this is insecure, but could be helpful for debugging).
    bool skipFCntCheck = 6;
}

message ActivateDeviceResponse {}

message DeactivateDeviceRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;
}

message DeactivateDeviceResponse {}

message GetDeviceActivationRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;
}

message GetDeviceActivationResponse {
    // The address of the device (4 bytes).
    bytes devAddr = 1;

    // The network-session key (16 bytes).
    bytes nwkSKey = 2;

    // The next expected uplink frame-counter.
    uint32 fCntUp = 3;

    // The frame-counter used for the next downlink frame.
    uint32 fCntDown = 4;

    // Skip frame-counter checks (this is insecure, but could be helpful for debugging).
    bool skipFCntCheck = 5;
}


message GetRandomDevAddrRequest {}

message GetRandomDevAddrResponse {
    bytes devAddr = 1;
}

message EnqueueDownlinkMACCommandRequest {
    // DevEUI of the node.
    bytes devEUI = 1;

    // Send the mac-command as FRMPayload (encrypted).
    bool frmPayload = 2;

    // Command identifier (specified by the LoRaWAN specs).
    uint32 cid = 4;

    // MAC-command(s). In case multiple payloads are defined, then they
    // are always sent within a single frame.
    repeated bytes commands = 5;
}

message EnqueueDownlinkMACCommandResponse {}

message SendDownlinkDataRequest {
    // DevEUI of the node to which to push the data.
    bytes devEUI = 1;

    // Data (encrypted with the AppSKey) to push to the node.
    bytes data = 2;

    // Payload must be acknowledged by the node.
    bool confirmed = 3;

    // FPort to use for transmitting the payload.
    uint32 fPort = 4;

    // FCnt used for encrypting the data. When this does not match the FCntDown
    // of the network-server, an error is returned.
    uint32 fCnt = 5;
}

message SendDownlinkDataResponse {}

message SendProprietaryPayloadRequest {
	// MACPayload of the proprietary LoRaWAN frame.
	bytes macPayload = 1;

	// MIC of the proprietary LoRaWAN frame (must be 4 bytes).
	bytes mic = 2;

	// Gateway MAC address(es) to use for transmitting the LoRaWAN frame.
	repeated bytes gatewayMACs = 3;

	// Set to true for sending as a gateway, or false for sending as a node.
	// In the latter case the frame will be received by other gateways.
	bool iPol = 4;

	// Frequency (Hz) to use for the transmission.
	uint32 frequency = 5;

	// Data-rate to use for the transmission.
	uint32 dr = 6;
}

message SendProprietaryPayloadResponse {}

message CreateGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // ID of the channel-configuration (optional).
    int64 channelConfigurationID = 7;
}

message CreateGatewayResponse {}

message GetGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message GetGatewayResponse {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // The timestamp when the gateway was created.
    string createdAt = 7;

    // The timestamp when the gateway was last updated.
    string updatedAt = 8;

    // The timestamp when the gateway was first seen.
    string firstSeenAt = 9;

    // The timestamp when the gateway was last seen.
    string lastSeenAt = 10;

    // ID of the channel-configuration (optional).
    int64 channelConfigurationID = 11;
}

message UpdateGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // ID of the channel-configuration (optional).
    int64 channelConfigurationID = 7;
}

message UpdateGatewayResponse {}

message ListGatewayRequest {
    // Max number of gateways to return in the result-set.
    int32 limit = 1;

    // Offset in the result-set (for pagination).
    int32 offset = 2;
}

message ListGatewayResponse {
    // Total number of gateways.
    int32 totalCount = 1;

    // Result-set.
    repeated GetGatewayResponse result = 2;
}

message DeleteGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message GenerateGatewayTokenRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message GenerateGatewayTokenResponse {
    // Generated token.
    string token = 1;
}

message DeleteGatewayResponse {}

enum AggregationInterval {
    SECOND = 0;
    MINUTE = 1;
    HOUR = 2;
    DAY = 3;
    WEEK = 4;
    MONTH = 5;
    QUARTER = 6;
    YEAR = 7;
}

message GatewayStats {
    // Timestamp of the (aggregated) measurement.
    string timestamp = 1;

    // Packets received by the gateway.
    int32 rxPacketsReceived = 2;

    // Packets received by the gateway that passed the CRC check.
    int32 rxPacketsReceivedOK = 3;

    // Packets received by the gateway for transmission.
    int32 txPacketsReceived = 4;

    // Packets transmitted by the gateway.
    int32 txPacketsEmitted = 5;
}

message GetGatewayStatsRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Aggregation interval.
    AggregationInterval interval = 2;

    // Timestamp to start from.
    string startTimestamp = 3;

    // Timestamp until to get from.
    string endTimestamp = 4;
}

message GetGatewayStatsResponse {
    repeated GatewayStats result = 1;
}

message GetFrameLogsForDevEUIRequest {
    // The device EUI (8 bytes).
    bytes devEUI = 1;

    // Max number of logs to return in the result-set.
    int32 limit = 2;

    // Offset in the result-set (for pagination).
    int32 offset = 3;
}

message GetFrameLogsResponse {
    // Total number of logs.
    int32 totalCount = 1;

    // The result-set.
    repeated FrameLog result = 2;
}

message FrameLog {
    // Timestamp of when the frame was logged.
    string createdAt = 1;

    // RX-info set (in case of an uplink).
    repeated RXInfo rxInfoSet = 2;

    // TX-info (in case of a downlink).
    TXInfo txInfo = 3;

    // LoRaWAN PHYPayload.
    bytes phyPayload = 4;
}

message DataRate {
    string modulation = 1;
    uint32 bandWidth = 2;
    uint32 spreadFactor = 3;
    uint32 bitrate = 4;
}

message RXInfo {
    // Channel number on which the frame was received.
    int32 channel = 1;

    // Code-rate.
    string codeRate = 2;

    // frequency.
    int64 frequency = 3;

    // LoRa SNR.
    double loRaSNR = 4;

    // RSSI / signal strength.
    int32 rssi = 5;

    // Time (when the gateway has a GPS).
    string time = 6;
    
    // Gateway internal timestamp.
    uint32 timestamp = 7;

    // Data-rate.
    DataRate dataRate = 8;

    // Gateway MAC.
    bytes mac = 9;
} 

message TXInfo {
    // Code-rate.
    string codeRate = 1;

    // Frequency.
    int64 frequency = 2;

    // Immediately.
    bool immediately = 3;

    // Gateway MAC.
    bytes mac = 4;

    // TX power.
    int32 power = 5;

    // Gateway internal timestamp.
    uint32 timestamp = 6;

    // Data-rate.
    DataRate dataRate = 7;
}

message CreateChannelConfigurationRequest {
    // Name of the channel-configuration.
    string name = 1;

    // Channels active in this configuration. These channel indices must map
    // to the channel numbers as specified in the LoRaWAN Regional Parameters.
    repeated int32 channels = 2;
}

message CreateChannelConfigurationResponse {
    // ID of the channel-configuration.
    int64 id = 1;
}

message GetChannelConfigurationRequest {
    // ID of the channel-configuration.
    int64 id = 1;
}

message GetChannelConfigurationResponse {
    // ID of the channel-configuration.
    int64 id = 1;

    // Name of the channel-configuration.
    string name = 2;

    // Channels active in this configuration. These channel indices must map
    // to the channel numbers as specified in the LoRaWAN Regional Parameters.
    repeated int32 channels = 3;

    // The timestamp when the channel-configuration was created.
    string createdAt = 4;

    // The timestamp when the channel-configuration was last updated.
    string updatedAt = 5;
}

message UpdateChannelConfigurationRequest {
    // ID of the channel-configuration.
    int64 id = 1;

    // Name of the channel-configuration.
    string name = 2;

    // Channels active in this configuration. These channel indices must map
    // to the channel numbers as specified in the LoRaWAN Regional Parameters.
    repeated int32 channels = 3;
}

message UpdateChannelConfigurationResponse {}

message DeleteChannelConfigurationRequest {
    // ID of the channel-configuration.
    int64 id = 1;
}

message DeleteChannelConfigurationResponse {}

message ListChannelConfigurationsRequest {}

message ListChannelConfigurationsResponse {
    // Result-set.
    repeated GetChannelConfigurationResponse result = 1;
}

message CreateExtraChannelRequest {
    // ID of the channel-configuration.
    int64 channelConfigurationID = 1;

    // Modulation.
    Modulation modulation = 2;

    // Frequency.
    int32 frequency = 3;

    // Bandwidth.
    int32 bandWidth = 4;

    // Bit rate (in case of FSK modulation).
    int32 bitRate = 5;

    // Spread-factors (in case of LoRa modulation).
    repeated int32 spreadFactors = 6;
}

message CreateExtraChannelResponse {
    // ID of the extra channel.
    int64 id = 1;
}

message UpdateExtraChannelRequest {
    // ID of the extra channel.
    int64 id = 1;

    // ID of the channel-configuration.
    int64 channelConfigurationID = 2;

    // Modulation.
    Modulation modulation = 3;

    // Frequency.
    int32 frequency = 4;

    // Bandwidth.
    int32 bandWidth = 5;

    // Bit rate (in case of FSK modulation).
    int32 bitRate = 6;

    // Spread-factors (in case of LoRa modulation).
    repeated int32 spreadFactors = 7;
}

message UpdateExtraChannelResponse {}

message DeleteExtraChannelRequest {
    // ID of the extra channel.
    int64 id = 1;
}

message DeleteExtraChannelResponse {}

message GetExtraChannelResponse {
    // ID of the extra channel.
    int64 id = 1;

    // ID of the channel-configuration.
    int64 channelConfigurationID = 2;

    // Created-at timestamp.
    string createdAt = 3;

    // Updated-at timestamp.
    string updatedAt = 4;

    // Modulation.
    Modulation modulation = 5;

    // Frequency.
    int32 frequency = 6;

    // Bandwidth.
    int32 bandwidth = 7;

    // Bit rate (in case of FSK modulation).
    int32 bitRate = 8;

    // Spread-factors (in case of LoRa modulation).
    repeated int32 spreadFactors = 9;
}

message GetExtraChannelsForChannelConfigurationIDRequest {
    // ID of the channel-configuration.
    int64 id = 1;
}

message GetExtraChannelsForChannelConfigurationIDResponse {
    // Result-set.
    repeated GetExtraChannelResponse result = 1;
}
